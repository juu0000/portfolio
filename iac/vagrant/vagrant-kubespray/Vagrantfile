$image_name = "bento/ubuntu-20.04-arm64"
$ansible_ip = "192.168.3.100"
$control_ip = "192.168.3.2"
$managed_ip = "192.168.3.1"
$control_node_count = 3
$managed_node_count = 2

$pre_install = <<-EOF
  echo "########## >>>>> pre install <<<<<< ##########"
  echo "root:vagrant" | sudo chpasswd
  sudo apt-get clean
  sudo rm -rf /var/lib/apt/lists/*
EOF

$pre_ssh = <<-EOF
  echo "########## >>>>> pre ssh <<<<<< ##########"
  sudo sed -i 's/^#PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
  sudo sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
  sudo systemctl restart sshd
EOF

$pre_ssh_key_gen = <<-EOF
  echo "########## >>>>> pre ssh key gen <<<<<< ##########"
  if [ -f ~/.ssh/id_rsa ]; then
    rm ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
    echo "기존 SSH 키를 삭제하고 새로 생성합니다."
  fi
  ssh-keygen -t rsa -b 4096 -C "vagrant@ansible" -f ~/.ssh/id_rsa -N ""
EOF

$pre_ssh_copy = <<-EOF
  echo "########## >>>>> pre ssh copy <<<<<< ##########"
  sudo mkdir -p /ssh
  sudo cp -f ~/.ssh/id_rsa.pub /ssh/id_rsa.pub
EOF

$pre_ssh_copy_managed = <<-EOF
  echo "########## >>>>> pre ssh copy managed <<<<<< ##########"
  sudo cat /ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
  sudo cat /ssh/id_rsa.pub >> /root/.ssh/authorized_keys
EOF

$pre_k8s_config = <<-EOF
  echo "########## >>>>> pre k8s config <<<<<< ##########"
  sudo swapoff -a
  sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  sudo modprobe br_netfilter
  sudo sysctl -p
  sudo modprobe overlay
  sudo sysctl -p
  sudo systemctl stop ufw
  sudo systemctl disable ufw
EOF

$pre_kubespray_config = <<-EOF
  echo "########## >>>>> pre kubespray config <<<<<< ##########"
  sudo add-apt-repository -y ppa:deadsnakes/ppa
  sudo apt-get update
  sudo apt-get install -y python3.11 python3.11-venv python3.11-dev python3.11-tk

  sudo apt-get install -y git
  cd /home/root
  git clone https://github.com/kubernetes-sigs/kubespray.git

EOF

$kubespray_config = <<-EOF
  echo "########## >>>>> kubespray config <<<<<< ##########"
  cd /home/root/kubespray
  python3.11 -m venv venv
  source venv/bin/activate
  pip install -r requirements.txt

  echo "########## >>>>> kubespray inventory config <<<<<< ##########"
  cp -rf inventory/sample /vagrant/ansible/inventory/mycluster
  cp  /vagrant/ansible/inventory/inventory.ini /vagrant/ansible/inventory/mycluster/inventory.ini
  # sed -i "s/container_manager: .*/container_manager: containerd/" /vagrant/ansible/inventory/mycluster/group_vars/k8s_cluster/k8s-cluster.yml
  # sed -i "s/etcd_deployment_type: .*/etcd_deployment_type: host/" /vagrant/ansible/inventory/mycluster/group_vars/k8s_cluster/etcd.yml
EOF


Vagrant.configure("2") do |config|

  # ansible control node
  config.vm.define "ansible" do |ansible|
    ansible.vm.box = $image_name
    ansible.vm.synced_folder "./ssh", "/ssh", disabled: false
    ansible.vm.synced_folder "./ansible", "/home/root/ansible", disabled: false
    ansible.vm.network "public_network", ip: $ansible_ip
    ansible.vm.provider "vmware_desktop" do |vmware|
      # Display the VirtualBox GUI when booting the machine
      vmware.gui = true
      vmware.vmx["memsize"] = "2048"
      vmware.vmx["numvcpus"] = "2"
    end
    ansible.vm.hostname = "ansible"
    ansible.vm.provision "shell", inline: $pre_install
    # ansible.vm.provision "shell", inline: $pre_install_ansible
    ansible.vm.provision "shell", inline: $pre_ssh_key_gen
    ansible.vm.provision "shell", inline: $pre_ssh
    ansible.vm.provision "shell", inline: $pre_ssh_copy
    ansible.vm.provision "shell", inline: $pre_kubespray_config
    ansible.vm.provision "shell", inline: $kubespray_config
  end


  # kubernetes control node
  (1..$control_node_count).each do |i|
    config.vm.define "control#{i}" do |control|
      control.vm.box = $image_name
      control.vm.synced_folder "./ssh", "/ssh", disabled: false
      control.vm.network "public_network", ip: "#{$control_ip}#{i}"
      control.vm.provider "vmware_desktop" do |vmware|
        vmware.gui = true
        vmware.vmx["memsize"] = "4096"
        vmware.vmx["numvcpus"] = "2"
      end
      control.vm.hostname = "control#{i}"
      control.vm.provision "shell", inline: $pre_install
      control.vm.provision "shell", inline: $pre_k8s_config
      control.vm.provision "shell", inline: $pre_ssh
      control.vm.provision "shell", inline: $pre_ssh_copy_managed
    end
  end

  # kubernetes managed node
  (1..$managed_node_count).each do |i|
    config.vm.define "managed#{i}" do |managed|
      managed.vm.box = $image_name
      managed.vm.synced_folder "./ssh", "/ssh", disabled: false
      managed.vm.network "public_network", ip: "#{$managed_ip}#{i}"
      managed.vm.provider "vmware_desktop" do |vmware|
        vmware.gui = true
        vmware.vmx["memsize"] = "4096"
        vmware.vmx["numvcpus"] = "2"
      end
      managed.vm.hostname = "managed#{i}"
      managed.vm.provision "shell", inline: $pre_install
      managed.vm.provision "shell", inline: $pre_k8s_config
      managed.vm.provision "shell", inline: $pre_ssh
      managed.vm.provision "shell", inline: $pre_ssh_copy_managed
    end
  end

end
